/*
*       Author:         Paul Girard Ph.D., UQAC
*       Editor:         Li Kunhao 20145975 ora00079
*       Date:           May 2017 
*       Objective:      Program using Pro*C/C++ and gcc to show how to use 
*                       different type of PL/SQL blocks & SQL in a C PGM
* 
*       
*      User type technician: lispart, explosion, implosion
* 
*  
*       Step 1: Precompilation with Pro*C/C++
* proc INAME=lab4base.pc CODE=ANSI_C SQLCHECK=semantics MODE=oracle USERID=user/password CHAR_MAP=charz
*
*       Step 2: Compilation with gcc    
* gcc lab4base.c -o lab4base -include /$ORACLE_HOME/precomp/public/sqlca.h -lclntsh -B$ORACLE_HOME/lib/ -B$ORACLE_HOME/lib
*/

#include <stdio.h>
#include <stdlib.h>
 
void sql_error();
void do_connect();

void lispart();
void explosion();
void implosion();
void crecomp();
void cancomp();

int print_menu();

int main()
{ 
        EXEC SQL WHENEVER SQLERROR do sql_error("Error at connect"); 
        
        do_connect();           /* connection to Oracle instance */

/*      Display the program menu
*       and execution of the transaction 
*/
        
        while (1)       /* infinite loop */
        {
            switch (print_menu())
            {
                case '1': lispart();
                        break;
            
                case '2': explosion();
                        break;
                case '3': implosion();
                        break;
                case '4': crecomp();
                        break;
                case '5': cancomp();
                        break;
                case '6': puts("\nAu revoir Sayonara Bye bye, Ni Hao"); 
                        exit(0);
                case '0': puts("\nAu revoir Sayonara Bye bye, Ni Hao"); 
                        exit(0);
                default: puts("\n =====> Enter a digit from the menu please ?");
                        break;
            }
        }
        
        EXEC SQL COMMIT WORK RELEASE;           /* lib�re les verroux et d�connecte */
                                        
        exit(0); 
}                       /* end of main() program */

/* ******************************************************************************************
*       Function to display the original error Oracle message 
*  ******************************************************************************************
*/

void sql_error(char *msg)
{
        char ora_msg[512];                      /* buffer for Oracle error message */
        int buf_len, msg_len;
        
        EXEC SQL WHENEVER SQLERROR continue;    /* Prevent an infinite loop */
        
        printf("\n%s\n",msg);                   /* print the local program message */
        buf_len=sizeof(ora_msg);
        
        sqlglm(ora_msg,&buf_len, &msg_len);     /* read the Oracle error message */
        printf("\n%.*s\n",msg_len, ora_msg);    /* print this message */
        
        EXEC SQL ROLLBACK RELEASE;              /* free locks */
        exit(1);
}               /*      fin de sql_error */

/* ******************************************************************************************
*       Function to do a connection to an Oracle user schema
*  ******************************************************************************************
*/

void do_connect()
{
   char *uid="ora00079/QCe6eu";

        EXEC SQL CONNECT :uid; 
        printf("Connected to Oracle schema\n");
}

/* ******************************************************************************************
*       Function to display the contents of a given part
*  ******************************************************************************************
*/

void lispart()
{
char    description[16],part_unit[11];     /* C needs 1 more octet than Oracle for binary 0 
                                at the end of a C character type */
int     my_partid,part_s_qty,part_o_qty,part_m_qty, none=1;
float   part_unit_price=0.0f;
        for (;;)                /* infinite loop until user enter a 0 */
        {
                printf("Number of the part (0 to quit )? ");
                scanf("%d",&my_partid);         

                printf("Part Number : %d\n",my_partid);
                if (my_partid == 0) 
                { 
                        EXEC SQL COMMIT; 
                        printf("End of this transaction\n"); 
                        break; 
                } 

/*-------------- Beginning the PL/SQL block -----------------*/ 

        EXEC SQL EXECUTE
        BEGIN 
                SELECT part_name,unit,unit_price,stock_qty,order_qty,min_qty 
                INTO :description,:part_unit,:part_unit_price,:part_s_qty,:part_o_qty,:part_m_qty      /* note: description needs 1 octet more */
                FROM ora00079.part WHERE part_id = :my_partid;
                EXCEPTION
                        WHEN NO_DATA_FOUND THEN 
                        :none:=0;
        END;
        END-EXEC;

/*-------------- end of PL/SQL block -----------------*/ 

        if (none==0)  
           {
                printf("Record not found \n");
                none=1;
           }
        else
            {
                printf("Part_ID\tPart_Name\tStock\tOrder\tMin\tUnit\tUnit_Price\n");
                printf("---------------------------------------------------------------------\n");
                printf("%d\t%s\t%4d\t%4d\t%4d\t%s %.2f\n",my_partid,description,part_s_qty,part_o_qty,part_m_qty,part_unit,part_unit_price); 
            }
        EXEC SQL COMMIT;
        }                               /* end of infinite loop */
        return; 
}
/* ******************************************************************************************
*       Function to display all components (part_id1, name) of a given part (part_id)
*  ******************************************************************************************
*/

void explosion()
{
int     my_partid_componet, my_partid,none=1,test;
char    description[16];        /* 1 more octet for the binary 0 */
               /* infinite loop until user enter a 0 */
        for(;;)
        {
            printf("Number of the part (0 to quit )? ");
            scanf("%d",&my_partid);         

            printf("Part Number : %d\n",my_partid);
            if (my_partid == 0) 
            { 
                    EXEC SQL COMMIT; 
                    printf("End of this transaction,get input 0\n");
                    getchar(); 
                    break;       
            } 
/*---------------------------------------------------------------------*/
            EXEC SQL EXECUTE
            BEGIN 
                    SELECT part_id INTO :test 
                    FROM ora00079.part 
                    WHERE part_id in (select componentid from ora00079.component where partid=:my_partid)
                    AND rownum=1;
                    EXCEPTION
                            WHEN NO_DATA_FOUND THEN 
                            :none:=0;
            END;
            END-EXEC;
/*---------------------------------------------------------------------*/

         if (none==0)  
           {
                printf("Record not found \n");
                none=1;
           }
        else
            {
 /*---------------------------------------------------------------------*/
                EXEC SQL DECLARE c1 cursor for
                        SELECT part_id, part_name 
                        FROM ora00079.part 
                        WHERE part_id in (select componentid from ora00079.component where partid=:my_partid);
                
                EXEC SQL open c1;

                EXEC SQL WHENEVER NOT FOUND do break;
                
                printf("\tPart ID\tName of Part\t\n");
                
                for (;;)
                {
                        EXEC SQL fetch c1 into :my_partid_componet, :description;
                        printf("\t%d\t%s\n",my_partid_componet, description);
                }
                
                printf("End of this transaction\n");
                EXEC SQL close c1;
            }                      
        EXEC SQL COMMIT;                /* free locks and keep the connection */
        getchar();  //
        }
        return;
}
/* ******************************************************************************************
*       Function to display all parts (part_id1, name) where a given part (part_id) is a component
*  ******************************************************************************************
*/

void implosion()
{
int     my_partid_componet, my_partid,none=1,test;
char    description[16];        /* 1 more octet for the binary 0 */
               /* infinite loop until user enter a 0 */
        for(;;)
        {
            printf("Number of the part (0 to quit )? ");
            scanf("%d",&my_partid);         

            printf("Part Number : %d\n",my_partid);
            if (my_partid == 0) 
            { 
                    EXEC SQL COMMIT; 
                    printf("End of this transaction,get input 0\n");
                    getchar(); 
                    break;       
            } 

/*---------------------------------------------------------------------*/
            EXEC SQL EXECUTE
            BEGIN 
                    SELECT part_id INTO :test 
                    FROM ora00079.part 
                    WHERE part_id in (select partid from ora00079.component where componentid=:my_partid)
                    AND rownum=1;
                    EXCEPTION
                            WHEN NO_DATA_FOUND THEN 
                            :none:=0;
            END;
            END-EXEC;
/*---------------------------------------------------------------------*/            
         if (none==0)  
           {
                printf("Record not found \n");
                none=1;
           }
        else
            {
                EXEC SQL DECLARE c2 cursor for
                        SELECT part_id, part_name 
                        FROM ora00079.part 
                        WHERE part_id in (select partid from ora00079.component where componentid=:my_partid);
                EXEC SQL open c2;

                EXEC SQL WHENEVER NOT FOUND do break;
                
                printf("\tPart ID\tName of Part\t\n");
                
                for (;;)
                {
                        EXEC SQL fetch c2 into :my_partid_componet, :description;
                        printf("\t%d\t%s\n",my_partid_componet, description);
                }
                
                printf("End of this transaction\n");
                EXEC SQL close c2; 
            }                     
            EXEC SQL COMMIT;                /* free locks and keep the connection */
            getchar();  //
        }
        return;
}
/* ******************************************************************************************
*       Function to Creation of a component (part_id1) of a given part (part_id2)
*  ******************************************************************************************
*/
void crecomp()
{
    int     my_partid_componet, my_partid,none=1,test;
               /* infinite loop until user enter a 0 */
        for(;;)
        {
            printf("Creation of a component \n");
            printf("Number of the part (0 to quit ,2001-2006)? ");
            scanf("%d",&my_partid);         
            printf("Part Number : %d\n",my_partid);
            if (my_partid == 0) 
            { 
                    EXEC SQL COMMIT; 
                    printf("End of this transaction,get input 0\n");
                    getchar(); 
                    break;       
            } 
/*---------------------------------------------------------------------*/
            EXEC SQL EXECUTE
            BEGIN 
                    SELECT part_id INTO :test 
                    FROM ora00079.part 
                    WHERE part_id=:my_partid
                    AND rownum=1;
                    EXCEPTION
                            WHEN NO_DATA_FOUND THEN 
                            :none:=0;
            END;
            END-EXEC;
/*---------------------------------------------------------------------*/
         if (none==0)  
           {
                printf("Record not found \n");
                none=1;
           }
        else
            {
 /*---------------------------------------------------------------------*/
                printf("Number of the component (0 to quit ,2001-2006)? ");
                scanf("%d",&my_partid_componet);         
                printf("Componet Number : %d\n",my_partid_componet);
                if (my_partid_componet == 0) 
                { 
                    EXEC SQL COMMIT; 
                    printf("End of this transaction,get input 0\n");
                    getchar(); 
                    break;       
                }
                EXEC SQL EXECUTE
                BEGIN 
                        INSERT INTO ora00079.component (partid,componentid)
                        values (:my_partid,:my_partid_componet); 
                        
                        if SQL%NOTFOUND then :none:=0; 
                        end if; 
                END;
                END-EXEC;
                EXEC SQL COMMIT;
                /*   if SQL%NOTFOUND then :none:=0; 
                        end if;  doesn't work in this case   */
                EXEC SQL EXECUTE
                BEGIN 
                SELECT partid INTO :test 
                    FROM ora00079.component
                    where  partid=:my_partid
                    and componentid=:my_partid_componet;
                    
                    EXCEPTION
                            WHEN NO_DATA_FOUND THEN 
                            :none:=0;
                END;
                END-EXEC;
                EXEC SQL COMMIT;
                if (none==0)  
                {
                    none=1;
                    printf("Record not found \n\n"); 
                }
                else  printf("Modification done\n\n"); 
                printf("End of this transaction\n\n");     
            }                      
        EXEC SQL COMMIT;                /* free locks and keep the connection */
        getchar();  //
        }
        return;
}

/* ******************************************************************************************
*       Function to Cancel a component (part_id1) of a given part (part_id2) 
*  ******************************************************************************************
*/
void cancomp()
{
    int     my_partid_componet, my_partid,none=1,test;
               /* infinite loop until user enter a 0 */
        for(;;)
        {
            printf("Cancel a component \n");
            printf("Number of the part (0 to quit ,2001-2006)? ");
            scanf("%d",&my_partid);         
            printf("Part Number : %d\n",my_partid);
            if (my_partid == 0) 
            { 
                    EXEC SQL COMMIT; 
                    printf("End of this transaction,get input 0\n");
                    getchar(); 
                    break;       
            } 
/*-----------------------find_the_part_data-------------------------------*/
            EXEC SQL EXECUTE
            BEGIN 
                    SELECT partid INTO :test 
                    FROM ora00079.component 
                    WHERE partid=:my_partid
                    AND rownum=1;
                    EXCEPTION
                            WHEN NO_DATA_FOUND THEN 
                            :none:=0;
            END;
            END-EXEC;
/*---------------------------------------------------------------------*/
         if (none==0)  
           {
                printf("Record not found \n");
                none=1;
           }
        else
            {
 /*---------------------------------------------------------------------*/
                printf("Number of the component (0 to quit ,2001-2006)? ");
                scanf("%d",&my_partid_componet);         
                printf("Componet Number : %d\n",my_partid_componet);
                if (my_partid_componet == 0) 
                { 
                        EXEC SQL COMMIT; 
                        printf("End of this transaction,get input 0\n");
                        getchar(); 
                        break;       
                }
                EXEC SQL EXECUTE
                BEGIN 
                        DELETE 
                        FROM ora00079.component 
                        WHERE partid=:my_partid
                        AND componentid=:my_partid_componet; 
                        
                        if SQL%NOTFOUND then :none:=0; 
                        end if; 
                END;
                END-EXEC;
                EXEC SQL COMMIT;
                if (none==0)  
                {
                    none=1;
                    printf("Record not found \n\n"); 
                }
                else  printf("Modification done \n\n"); 
                printf("End of this transaction\n\n");
            }                      
        EXEC SQL COMMIT;                /* free locks and keep the connection */
        getchar();  //
        }
        return;
}

/* ************************************************************
*       Function print the menu and choose the transaction
*  ************************************************************
*/

int print_menu()
{
   char choice;                          /* id of menu */
        //input a char if it is int type ,and it would dead loop;
        printf("\n\t Choose a transaction by entering a number \n");
        printf("\t *****************************************\n");
        printf("\t (1) LISPART\n");
        printf("\t (2) EXPLOSION\n");
        printf("\t (3) IMPLOSION\n");
        printf("\t (4) Create a component\n");
        printf("\t (5) Cancel a component\n");
        printf("\t (6/0) QUIT\n");
        printf("Enter your choice ? "); 
        scanf("%c",&choice);            /* read the choice */
        return choice;
}
