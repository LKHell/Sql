/*
*       Author:         Paul Girard Ph.D., UQAC
*       Date:           May 2017
*       usertype: PA
*                       Zhang Yuhao 
*       tjut code :     20145992
*       Objective:      Program using Pro*C/C++ and gcc to show how to use 
*                       different type of PL/SQL blocks & SQL in a C PGM
*
*       Step 1: Precompilation with Pro*C/C++
* proc INAME=lab4base.pc CODE=ANSI_C SQLCHECK=semantics MODE=oracle USERID=user/password CHAR_MAP=charz
*
*       Step 2: Compilation with gcc    
* gcc lab4base.c -o lab4base -include /$ORACLE_HOME/precomp/public/sqlca.h -lclntsh -B$ORACLE_HOME/lib/ -B$ORACLE_HOME/lib
*/

#include <stdio.h>
#include <stdlib.h>
 
void sql_error();
void do_connect();

void low_part();
void cre_po();
void pot_supp();

int print_menu();

int main()
{ 
        EXEC SQL WHENEVER SQLERROR do sql_error("Error at connect"); 
        
        do_connect();           /* connection to Oracle instance */

/*      Display the program menu
*       and execution of the transaction 
*/
        
        while (1)       /* infinite loop */
        {
         switch (print_menu())
         {
          case 1: low_part();
                  break;
          case 2: cre_po();
                  break;
          case 3: pot_supp();
                  break;

          case 5: print_menu();
                  break;
          case 6: puts("\nAu revoir Sayonara Bye bye, Ni Hao"); 
                exit(0);
          default: puts("\n =====> Enter a digit from the menu please ?");
                   break;
         }
        }
        
        EXEC SQL COMMIT WORK RELEASE;           /* lib�re les verroux et d�connecte */
                                        
        exit(0); 
}                       /* end of main() program */

/* ******************************************************************************************
*       Function to display the original error Oracle message 
*  ******************************************************************************************
*/

void sql_error(char *msg)
{
        char ora_msg[512];                      /* buffer for Oracle error message */
        int buf_len, msg_len;
        
        EXEC SQL WHENEVER SQLERROR continue;    /* Prevent an infinite loop */
        
        printf("\n%s\n",msg);                   /* print the local program message */
        buf_len=sizeof(ora_msg);
        
        sqlglm(ora_msg,&buf_len, &msg_len);     /* read the Oracle error message */
        printf("\n%.*s\n",msg_len, ora_msg);    /* print this message */
        
        EXEC SQL ROLLBACK RELEASE;              /* free locks */
        exit(1);
}               /*      fin de sql_error */

/* ******************************************************************************************
*       Function to do a connection to an Oracle user schema
*  ******************************************************************************************
*/

void do_connect()
{
   char *uid="ora00123/RRfsJu";

        EXEC SQL CONNECT :uid; 
        printf("Connected to Oracle schema\n");
}

/* ******************************************************************************************
*       Display the list of parts (part_id, name) under the responsability 
*       of a given purchasing agent (emp_num) and having
*       stock_qty + ordered_qty <= qty_min
*  ******************************************************************************************
*/

void low_part()
{
char    description[16];     /* C needs 1 more octet than Oracle for binary 0 
                                at the end of a C character type */
int     my_emp_num,my_partid,s_stock, none=1;
        for (;;)                /* infinite loop until user enter a 0 */
        {
                printf("Number of the Emp (0 to quit )? ");
                scanf("%d",&my_emp_num);         

                printf("Part Number : %d\n",my_emp_num);
                if (my_emp_num == 0) 
                { 
                        EXEC SQL COMMIT; 
                        printf("End of this transaction\n"); 
                        break; 
                } 

/*-------------- Beginning the PL/SQL block -----------------*/
/*find data*/ 

        EXEC SQL EXECUTE
        BEGIN 
                SELECT part_id INTO :my_partid 
                FROM ora00079.part_pa
                WHERE emp_number = :my_emp_num 
                AND rownum=1;
                EXCEPTION
                        WHEN NO_DATA_FOUND THEN 
                        :none:=0;
        END;
        END-EXEC;
/*---------------------------------------------------------------------*/

         if (none==0)  
           {
                printf("Record not found \n");
                none=1;
           }
        else
            {
                
/*---------------------------------------------------------------------*/
                EXEC SQL declare c2 cursor for
                        SELECT part_id ,part_name,min_qty-order_qty-stock_qty X
                        FROM ora00079.part_pa               
                        WHERE emp_number = :my_emp_num ;
                
                EXEC SQL open c2;
                
                EXEC SQL WHENEVER NOT FOUND do break;
                
                printf("\tPart ID\tName of Part\tRe_Order_qty\n");       
                for (;;)
                {
                        EXEC SQL fetch c2 into :my_partid, :description,:s_stock;
                        if(s_stock>0)
                        printf("\t%4d\t%s\t%d\n",my_partid, description,s_stock);
                        else
                        printf("\t%4d\t%s\t don't re_order\n",my_partid, description);
                }        
                printf("End of this transaction\n");
                EXEC SQL close c2;
/*-------------- end of PL/SQL block -----------------*/ 
                }

       
        EXEC SQL COMMIT;
        }                               /* end of infinite loop */
        return; 
}
/* ******************************************************************************************
*      Creation of a purchase order (po_number,pa_name, ...date, supplier info,
*       and for each product (product_id, qty ordered); 
*       calculate the total of the puchase order. 
*       Default status ‘not completed’ + default total = 0
*  ******************************************************************************************
*/

void cre_po()
{
char    for_po_date[9];     /* C needs 1 more octet than Oracle for binary 0 
                                at the end of a C character type */
int     for_po_number,for_qty_order,for_product_id,for_emp_num,
        sup_id,check_quit,
        none=1;
        for (;;)                /* infinite loop until user enter a 0 */
        {
/*-------------- get_order_number -----------------*/ 
 
        EXEC SQL EXECUTE
        BEGIN 
                SELECT po_number    INTO :for_po_number 
                FROM (SELECT * FROM ora00079.purchase_order  ORDER BY rownum DESC) 
                WHERE rownum = 1;
                EXCEPTION
                        WHEN NO_DATA_FOUND THEN 
                        :none:=0;
        END;
        END-EXEC;

/*-------------- end of PL/SQL block -----------------*/
        if (none==0)  
        {
                printf("Record not found \n");
                none=1;
        }
        else
        {  
                for_po_number++;
                printf("\n Create Purchase Order : %d\n ",for_po_number);
                printf("input pa_agent number(0 to quit):");
                scanf("%d",&for_emp_num); 
                if (for_emp_num == 0) 
                { 
                        printf("End of this transaction\n"); 
                        break; 
                }
                printf("input po_date:");
                scanf("%s",for_po_date);          
                printf("\nEmp_num %d\nDate: %s\n",for_emp_num,for_po_date);
                printf("input supplier_id:");
                scanf("%d",&sup_id);

                printf(" Purchase Order: %d\nEmp_num: %d\n supplier_id: %d,\nDate: %s\n check info(0 to quit)",for_po_number,for_emp_num,sup_id,for_po_date);
                scanf("%d",&check_quit);
                if (check_quit == 0) 
                        { 
                                EXEC SQL COMMIT; 
                                printf("End of this transaction\n"); 
                                break; 
                        }
/*----------------------initial purchase order and create pa_task----------------------------------*/
                EXEC SQL INSERT INTO ora00079.purchase_order (po_number,po_date)
                        values (:for_po_number,:for_po_date);
                EXEC SQL INSERT INTO ora00079.contractual
                        values (:sup_id,:for_po_number);
                        
                EXEC SQL INSERT INTO ora00079.pa_task 
                        values (:for_emp_num,:for_po_number);  
                
                EXEC SQL COMMIT;
/*--------------------------------------------------------------------*/
                for(;;)
                {
                        printf("input product_id,qty_order (0 to end, ex.7001,100 )\n");
                        scanf("%d,%d",&for_product_id,&for_qty_order);
                        if (for_product_id == 0) 
                        { 
                                EXEC SQL COMMIT; 
                                printf("End of this transaction\n"); 
                                break; 
                        }
                        /*---------------------------------*/
                        EXEC SQL INSERT INTO ora00079.detail 
                                VALUES (:for_po_number,:for_product_id,:for_qty_order,0);  
                        EXEC SQL COMMIT;
                        /*---------------------------------*/ 
                }
                
                // if (my_partid == 0) 
                // { 
                //         EXEC SQL COMMIT; 
                //         printf("End of this transaction\n"); 
                //         break; 
                // } 
        } 
                
       
        EXEC SQL COMMIT;
        }                               /* end of infinite loop */
        return; 
}

/* *************************************************************
*       Display the list of potential suppliers products (supplier_id, product_id,
*       unit_prod, unit_prod_cost) for a given part (part_id)
*  *************************************************************
*/

void pot_supp()
{
float unit_prod_cost=0.0f;
int   for_supplier_id,for_product_id,for_unit_prod,my_partid,none=1;
        for (;;)                /* infinite loop until user enter a 0 */
        {
                printf("Number of the part (0 to quit ,2001-2006)? ");
                scanf("%d",&my_partid);         

                printf("Part Number : %d\n",my_partid);
                if (my_partid == 0) 
                { 
                        EXEC SQL COMMIT; 
                        printf("End of this transaction\n"); 
                        break; 
                } 

/*-------------- Beginning the PL/SQL block -----------------*/ 

        EXEC SQL EXECUTE
        BEGIN 
                SELECT supplier_id INTO :for_supplier_id      
                FROM ora00079.pot_supplier_pa 
                WHERE part_id = :my_partid
                AND rownum=1;
                EXCEPTION
                        WHEN NO_DATA_FOUND THEN 
                        :none:=0;
        END;
        END-EXEC;

/*-------------- end of PL/SQL block -----------------*/ 

        if (none==0)  
           {
                printf("Record not found \n");
                none=1;
           }
        else
            {
/*-------------- Beginning the PL/SQL block -----------------*/ 
                EXEC SQL declare cursor_pot_supp cursor for
                SELECT  supplier_id,product_id,unit,unit_price
                FROM ora00079.pot_supplier_pa
                WHERE part_id=:my_partid;
        
                EXEC SQL open cursor_pot_supp;

                EXEC SQL WHENEVER NOT FOUND do break;
                
                printf("\tSupplier_id\tProduct_id\tUnit_prod\tUnit_prod_cost\n");       
                for (;;)
                {
                        EXEC SQL fetch cursor_pot_supp into :for_supplier_id, :for_product_id, :for_unit_prod, :unit_prod_cost ;

                        printf("\t%d\t\t%d\t\t%d\t\t%.2f\n",for_supplier_id, for_product_id,for_unit_prod,unit_prod_cost);
                }
                
                printf("End of this transaction\n");
                EXEC SQL close cursor_pot_supp; 

/*-------------- end of PL/SQL block -----------------*/         
            }
        EXEC SQL COMMIT;
        }              
          
                   

        return;
}




/* ************************************************************
*       Function print the menu and choose the transaction
*  ************************************************************
*/

int print_menu()
{
   int choice;                          /* id of menu */
        printf("\n\t Choose a transaction by entering a number \n");
        printf("\t *****************************************\n");
        printf("\t (1) low_part\n");
        printf("\t (2) cre_po\n");
        printf("\t (3) pot_supp\n");
        printf("\t (5) DISPLAY MENU\n");
        printf("\t (6) QUIT\n");
        printf("Enter your choice ? "); 
        scanf("%d",&choice);            /* read the choice */
        return choice;
}
