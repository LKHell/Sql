/*
*       Author:         Paul Girard Ph.D., UQAC
*       USERTYPE:       LiRan 'SK
*       Date:           May 2017 
*       Objective:      Program using Pro*C/C++ and gcc to show how to use 
*                       different type of PL/SQL blocks & SQL in a C PGM
*
*       Step 1: Precompilation with Pro*C/C++
* proc INAME=lab4base.pc CODE=ANSI_C SQLCHECK=semantics MODE=oracle USERID=user/password CHAR_MAP=charz
*
*       Step 2: Compilation with gcc    
* gcc lab4base.c -o lab4base -include /$ORACLE_HOME/precomp/public/sqlca.h -lclntsh -B$ORACLE_HOME/lib/ -B$ORACLE_HOME/lib
*/

#include <stdio.h>
#include <stdlib.h>
 
void sql_error();
void do_connect();

void part_out();
void pord_in();
void list_po();

int print_menu();

int main()
{ 
        EXEC SQL WHENEVER SQLERROR do sql_error("Error at connect"); 
        
        do_connect();           /* connection to Oracle instance */

/*      Display the program menu
*       and execution of the transaction 
*/
        
        while (1)       /* infinite loop */
        {
         switch (print_menu())
         {
          case 1: part_out();
                  break;
          case 2: pord_in();
                  break;
          case 3: list_po();
                  break;
         
          case 5: print_menu();
                  break;
          case 6: puts("\nAu revoir Sayonara Bye bye, Ni Hao"); 
                exit(0);
          default: puts("\n =====> Enter a digit from the menu please ?");
                   break;
         }
        }
        
        EXEC SQL COMMIT WORK RELEASE;           /* lib�re les verroux et d�connecte */
                                        
        exit(0); 
}                       /* end of main() program */

/* ******************************************************************************************
*       Function to display the original error Oracle message 
*  ******************************************************************************************
*/

void sql_error(char *msg)
{
        char ora_msg[512];                      /* buffer for Oracle error message */
        int buf_len, msg_len;
        
        EXEC SQL WHENEVER SQLERROR continue;    /* Prevent an infinite loop */
        
        printf("\n%s\n",msg);                   /* print the local program message */
        buf_len=sizeof(ora_msg);
        
        sqlglm(ora_msg,&buf_len, &msg_len);     /* read the Oracle error message */
        printf("\n%.*s\n",msg_len, ora_msg);    /* print this message */
        
        EXEC SQL ROLLBACK RELEASE;              /* free locks */
        exit(1);
}               /*      fin de sql_error */

/* ******************************************************************************************
*       Function to do a connection to an Oracle user schema
*  ******************************************************************************************
*/

void do_connect()
{
   char *uid="ora00137/wuUmc3";

        EXEC SQL CONNECT :uid; 
        printf("Connected to Oracle schema\n");
}

/* ******************************************************************************************
*       Display the detail of a given purchase order (po_number): 
        po_number, date, purchasing agent_name, supplier number, name, address, contact,list of all ordered products 
        ( product_id, prod_name, prod_ unit,unit_price , qty ordered, qty_received), 
        total, status of the purchase order.
*  ******************************************************************************************
*/

void list_po()
{
int     set_po_number,  none=1;
int     po_number_i,    supplier_id_i,  product_id_i,
        qty_order_i,    qty_rec_i,      unit_i;

char    status_c[16],   po_date_c[9],   pa_name_c[16],
        supplier_name_c[16],    addr_c[21],     contact_c[16],
        product_name_c[16];
                                /* C needs 1 more octet than Oracle for binary 0 
                                at the end of a C character type */
float   unit_price_f=0.0f;

        for (;;)                /* infinite loop until user enter a 0 */
        {
                printf("Number of the purchase (0 to quit )? ");
                scanf("%d",&set_po_number);         

                printf("Part Number : %d\n",set_po_number);
                if (set_po_number == 0) 
                { 
                        EXEC SQL COMMIT; 
                        printf("End of this transaction\n"); 
                        break; 
                } 
/*
select purchase_order.po_number,status,po_date,pa_name,supplier.supplier_id,supplier_name,addr,contact,product.product_id,product_name,product.unit,product.unit_price,qty_order,qty_rec
from purchase_order,pa_agent,pa_task,supplier,product,detail
where purchase_order.po_number=pa_task.po_number
and   pa_task.emp_num=pa_agent.emp_num
and   product.supplier_id=supplier.supplier_id
and   product.product_id=detail.product_id
and   purchase_order.po_number=detail.po_number;
*/
/*-------------- Beginning the PL/SQL block -----------------*/ 

        EXEC SQL EXECUTE
        BEGIN 
                SELECT po_number,status,po_date,pa_name,supplier_id,supplier_name,addr,contact,product_id,product_name,unit,unit_price,qty_order,qty_rec 
                INTO :po_number_i,:status_c,:po_date_c,:pa_name_c,:supplier_id_i,:supplier_name_c,:addr_c,:contact_c,:product_id_i,:product_name_c,:unit_i,:unit_price_f,:qty_order_i,:qty_rec_i     
                FROM ora00079.purchase_sk 
                WHERE po_number = :set_po_number;
                EXCEPTION
                        WHEN NO_DATA_FOUND THEN 
                        :none:=0;
        END;
        END-EXEC;

/*-------------- end of PL/SQL block -----------------*/ 

        if (none==0)  
           {
                printf("Record not found \n");
                none=1;
           }
        else
            {
                printf("po_number\tstatus\t\tpo_date\t\tpa_name\n"); 
                printf("%d\t\t%s\t%s\t%s\n\n",po_number_i,status_c,po_date_c,pa_name_c); 
                
                printf("supplier_id\tsupplier_name\taddr\t\t\tcontact\t\tproduct_id\n"); 
                printf("%d\t\t%s\t%s\t%s %d\n\n",supplier_id_i,supplier_name_c,addr_c,contact_c,product_id_i); 
                
                printf("product_name\tunit\tunit_price\tqty_order\tqty_rec \n");
                printf("%s\t%d\t%.2f\t\t%d\t\t%d\n",product_name_c,unit_i,unit_price_f,qty_order_i,qty_rec_i); 
            }
        EXEC SQL COMMIT;
        }                               /* end of infinite loop */
        return; 
}

/* ******************************************************************************************
*      A given part (part_id) is updated (qty_stock) when some qty are taken out
*  ******************************************************************************************
*/

void part_out()
{
        int part_id_,stock_qty_,out_qty_,none=1;
        for (;;)                /* infinite loop until user enter a 0 */
        {
                printf("Number of the part (0 to quit 2001-2006)? ");
                scanf("%d",&part_id_);         

                printf("Part Number : %d\n",part_id_);
                if (part_id_ == 0) 
                { 
                        EXEC SQL COMMIT; 
                        printf("End of this transaction\n"); 
                        break; 
                } 

/*-------------- Beginning the PL/SQL block -----------------*/ 

        EXEC SQL EXECUTE
        BEGIN 
                SELECT stock_qty INTO :stock_qty_      
                FROM ora00079.part WHERE part_id = :part_id_;
                EXCEPTION
                        WHEN NO_DATA_FOUND THEN 
                        :none:=0;
        END;
        END-EXEC;

/*-------------- end of PL/SQL block -----------------*/ 

        if (none==0)  
           {
                printf("Record not found \n");
                none=1;
                break;
           }
        else
            {
                printf("Part_ID\t\tStock_qty\n"); 
                printf("--------------------\n"); 
                printf("%d\t\t%d\n",part_id_,stock_qty_); 
            }
    //taken out         
           
                for(;;)
                {
                        printf("qty taken out(<=stock_qty)? ");
                        scanf("%d",&out_qty_);         
                        if(out_qty_<=stock_qty_) break;
                }
                
                if (out_qty_ == 0) 
                { 
                        EXEC SQL COMMIT; 
                        printf("End of this transaction\n"); 
                        break; 
                } 
                
//----------------------------------------------------
                EXEC SQL EXECUTE
                BEGIN 
                        UPDATE ora00079.part     
                        SET stock_qty=stock_qty-:out_qty_
                        WHERE part_id = :part_id_;
                        EXCEPTION
                                WHEN NO_DATA_FOUND THEN 
                                :none:=0;
                END;
                END-EXEC;
                EXEC SQL COMMIT;
//------------------------------------------------------
                
                if (none==0)  
                {
                        printf("Record not found \n");  
                }
                else    printf("Modification done\n"); 
        }
        return;
}

/* ******************************************************************************************
*       The corresponding part (part_id, stock_qty, order_qty ) of a product 
*       (product_id, unit,qty_received) delivered by the supplier (supplier_id)
*       following a purchase order (purchase_order_number) is updated) and the
*       detail of the purchase order (qty_rec) is also updated for each product received
*  ******************************************************************************************
*/
void pord_in()
{       
        int get_po_number,get_product_id,get_gty_rec,get_gty_order,none=1;
        char set_status[16]="Completed";
        
        for(;;)
        {
                printf("Number of the purchase_order (0 to quit)? ");
                scanf("%d",&get_po_number);         

                printf("Purchase_order Number : %d\n",get_po_number);
                if (get_po_number == 0) 
                { 
                        EXEC SQL COMMIT; 
                        printf("End of this transaction\n"); 
                        break; 
                }
                
                printf("Input product_id");
                scanf("%d",&get_product_id);
                if (get_po_number == 0) 
                { 
                        EXEC SQL COMMIT; 
                        printf("End of this transaction\n"); 
                        break; 
                }
                
                /*--------------get_gty_order-----------------*/
                EXEC SQL EXECUTE
                BEGIN 
                        SELECT  qty_order INTO : get_gty_order
                        FROM ora00079.detail     
                        WHERE po_number = :get_po_number
                        AND product_id = :get_product_id;
                        EXCEPTION
                                WHEN NO_DATA_FOUND THEN 
                                :none:=0;
                END;
                END-EXEC;
                /*----------------if rec>order-set rec=order--------------------------*/
                printf("Input get_gty_rec");
                scanf("%d",&get_gty_rec);
                if (get_gty_rec == 0) 
                { 
                        EXEC SQL COMMIT; 
                        printf("End of this transaction\n"); 
                        break; 
                }else if(get_gty_rec>get_gty_order)
                {

                }
                
                /*---------------------------------------------------------*/
                EXEC SQL EXECUTE
                BEGIN 
                        UPDATE ora00079.detail     
                        SET qty_rec=:get_gty_rec
                        WHERE po_number = :get_po_number
                        AND product_id = :get_product_id;
                        EXCEPTION
                                WHEN NO_DATA_FOUND THEN 
                                :none:=0;
                END;
                END-EXEC;
                EXEC SQL COMMIT;
                /*---------------------------------------------------------*/
                if (none==0)  
                {
                        printf("Record not found \n");  
                }
                else    printf("Modification done\n"); 

        }
        return;
}

/* ************************************************************
*       Function print the menu and choose the transaction
*  ************************************************************
*/

int print_menu()
{
   int choice;                          /* id of menu */
        printf("\n\t Choose a transaction by entering a number \n");
        printf("\t *****************************************\n");
        printf("\t (1) Part out\n");
        printf("\t (2) Pord in\n");
        printf("\t (3) List po\n");
 
        printf("\t (5) DISPLAY MENU\n");
        printf("\t (6) QUIT\n");
        printf("Enter your choice ? "); 
        scanf("%d",&choice);            /* read the choice */
        return choice;
}
