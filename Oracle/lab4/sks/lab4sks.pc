/*
*       Author:         Paul Girard Ph.D., UQAC
*       Date:           March 2016 
*       Objective:      Program using Pro*C/C++ and gcc to show how to use 
*                       different type of PL/SQL blocks & SQL in a C PGM
*
*       Step 1: Precompilation with Pro*C/C++
* proc INAME=lab4base.pc CODE=ANSI_C SQLCHECK=semantics MODE=oracle USERID=user/password CHAR_MAP=charz
*
*       Step 2: Compilation with gcc    
* gcc lab4base.c -o lab4base -include /$ORACLE_HOME/precomp/public/sqlca.h -lclntsh -B$ORACLE_HOME/lib/ -B$ORACLE_HOME/lib
*/

#include <stdio.h>
#include <stdlib.h>
 
void sql_error();
void do_connect();

void invent_();
void value_();

int print_menu();

int main()
{ 
        EXEC SQL WHENEVER SQLERROR do sql_error("Error at connect"); 
        
        do_connect();           /* connection to Oracle instance */

/*      Display the program menu
*       and execution of the transaction 
*/
        
        while (1)       /* infinite loop */
        {
         switch (print_menu())
         {
          case 1: invent_();
                  break;
          case 2: value_();
                  break;
 
          case 5: print_menu();
                  break;
          case 6: puts("\nAu revoir Sayonara Bye bye, Ni Hao"); 
                exit(0);
          default: puts("\n =====> Enter a digit from the menu please ?");
                   break;
         }
        }
        
        EXEC SQL COMMIT WORK RELEASE;           /* lib�re les verroux et d�connecte */
                                        
        exit(0); 
}                       /* end of main() program */

/* ******************************************************************************************
*       Function to display the original error Oracle message 
*  ******************************************************************************************
*/

void sql_error(char *msg)
{
        char ora_msg[512];                      /* buffer for Oracle error message */
        int buf_len, msg_len;
        
        EXEC SQL WHENEVER SQLERROR continue;    /* Prevent an infinite loop */
        
        printf("\n%s\n",msg);                   /* print the local program message */
        buf_len=sizeof(ora_msg);
        
        sqlglm(ora_msg,&buf_len, &msg_len);     /* read the Oracle error message */
        printf("\n%.*s\n",msg_len, ora_msg);    /* print this message */
        
        EXEC SQL ROLLBACK RELEASE;              /* free locks */
        exit(1);
}               /*      fin de sql_error */

/* ******************************************************************************************
*       Function to do a connection to an Oracle user schema
*  ******************************************************************************************
*/

void do_connect()
{
   char *uid="ora00059/Zxz9sQ";

        EXEC SQL CONNECT :uid; 
        printf("Connected to Oracle schema\n");
}

/* ******************************************************************************************
*       Display the number of parts having a different serial number AND the total number of parts in stock
*  ******************************************************************************************
*/

void invent_()
{
        int get_part_id,get_stock;

        EXEC SQL DECLARE c1 CURSOR FOR
                SELECT part_id, stock_qty
                FROM ora00079.part_sks;
        EXEC SQL OPEN c1;
        EXEC SQL WHENEVER NOT FOUND do break;
        
        printf("\tPart ID\t\tSTOCK_QTY\n");
        for(;;)
        {
                EXEC SQL FETCH c1 INTO :get_part_id,:get_stock;
                printf("\t%d\t\t%d\n",get_part_id,get_stock);
        } 
        printf("END");
        EXEC SQL CLOSE c1;
        EXEC SQL COMMIT;
        return; 
}


/* ******************************************************************************************
*      Display the total value of parts in stock
*  ******************************************************************************************
*/

void value_()
{
    int get_part_id,get_value;

        EXEC SQL DECLARE c2 CURSOR FOR
                SELECT part_id, stock_qty*unit_price
                FROM ora00079.part_sks;
        EXEC SQL OPEN c2;
        EXEC SQL WHENEVER NOT FOUND do break;
        
        printf("\tPart ID\t\tSTOCK_QTY\n");
        for(;;)
        {
                EXEC SQL FETCH c2 INTO :get_part_id,:get_value;
                printf("\t%d\t\t%d\n",get_part_id,get_value);
        } 
        printf("END");
        EXEC SQL CLOSE c2;
        EXEC SQL COMMIT;
          
        return; 
}




/* ************************************************************
*       Function print the menu and choose the transaction
*  ************************************************************
*/

int print_menu()
{
   int choice;                          /* id of menu */
        printf("\n\t Choose a transaction by entering a number \n");
        printf("\t *****************************************\n");
        printf("\t (1) INVENT\n");
        printf("\t (2) VALUE\n");
        
        printf("\t (5) DISPLAY MENU\n");
        printf("\t (6) QUIT\n");
        printf("Enter your choice ? "); 
        scanf("%d",&choice);            /* read the choice */
        return choice;
}
