/*
*       Author:         Paul Girard Ph.D., UQAC
*       Modified by 	LiuTao 20145977 
*		UserType: 		PDS
*       Date:           May 2017 
*       Objective:      Program using Pro*C/C++ and gcc to show how to use 
*                       different type of PL/SQL blocks & SQL in a C PGM
*
*       Step 1: Precompilation with Pro*C/C++
* proc INAME=lab4base.pc CODE=ANSI_C SQLCHECK=semantics MODE=oracle USERID=user/password CHAR_MAP=charz
*
*       Step 2: Compilation with gcc    
* gcc lab4base.c -o lab4base -include /$ORACLE_HOME/precomp/public/sqlca.h -lclntsh -B$ORACLE_HOME/lib/ -B$ORACLE_HOME/lib
*/

#include <stdio.h>
#include <stdlib.h>
 
void sql_error();
void do_connect();

void modresp();
void quant_();
void respon_();

int print_menu();

int main()
{ 
        EXEC SQL WHENEVER SQLERROR do sql_error("Error at connect"); 
        
        do_connect();           /* connection to Oracle instance */

/*      Display the program menu
*       and execution of the transaction 
*/
        
        while (1)       /* infinite loop */
        {
         switch (print_menu())
         {
          case 1: modresp();
                  break;
          case 2: quant_();
                  break;
          case 3: respon_();
                  break;
          case 5: print_menu();
                  break;
          case 6: puts("\nAu revoir Sayonara Bye bye, Ni Hao"); 
                exit(0);
          default: puts("\n =====> Enter a digit from the menu please ?");
                   break;
         }
        }
        
        EXEC SQL COMMIT WORK RELEASE;           /* lib�re les verroux et d�connecte */
                                        
        exit(0); 
}                       /* end of main() program */

/* ******************************************************************************************
*       Function to display the original error Oracle message 
*  ******************************************************************************************
*/

void sql_error(char *msg)
{
        char ora_msg[512];                      /* buffer for Oracle error message */
        int buf_len, msg_len;
        
        EXEC SQL WHENEVER SQLERROR continue;    /* Prevent an infinite loop */
        
        printf("\n%s\n",msg);                   /* print the local program message */
        buf_len=sizeof(ora_msg);
        
        sqlglm(ora_msg,&buf_len, &msg_len);     /* read the Oracle error message */
        printf("\n%.*s\n",msg_len, ora_msg);    /* print this message */
        
        EXEC SQL ROLLBACK RELEASE;              /* free locks */
        exit(1);
}               /*      fin de sql_error */

/* ******************************************************************************************
*       Function to do a connection to an Oracle user schema
*  ******************************************************************************************
*/

void do_connect()
{
   char *uid="ora00057/s48d7M";

        EXEC SQL CONNECT :uid; 
        printf("Connected to Oracle schema\n");
}

/* ******************************************************************************************
*       Change the responsability of a given part (part_id) 
*       from a agent (emp_num1) to another agent (emp_num2)
*  ******************************************************************************************
*/

void modresp()
{

int     my_partid,emp_num1,emp_num2, none=1;
        for (;;)                /* infinite loop until user enter a 0 */
        {
                printf("Number of the part (0 to quit ,2001-2006)? ");
                scanf("%d",&my_partid);         

                printf("Part Number : %d\n",my_partid);
                if (my_partid == 0) 
                { 
                        EXEC SQL COMMIT; 
                        printf("End of this transaction\n"); 
                        break; 
                } 
/*-------------- Beginning the PL/SQL block -----------------*/ 

        EXEC SQL EXECUTE
        BEGIN 
                SELECT emp_number INTO : emp_num1     
                FROM ora00079.responsible WHERE part_number = :my_partid
                AND rownum = 1;
                EXCEPTION
                        WHEN NO_DATA_FOUND THEN 
                        :none:=0;
        END;
        END-EXEC;

/*-------------- end of PL/SQL block -----------------*/ 

        if (none==0)  
           {
                printf("Record not found \n");
                none=1;
           }
        else
            {
                printf("Part_id    Emp_id\n"); 
                printf("---------------\n"); 
                printf("%d\t\t\t%d\n",my_partid,emp_num1); 
                
                
                for(;;)
				{
					printf("Set the emp_num(0 to quit,1001-1007) ");
					scanf("%d",&emp_num2); 
					if (emp_num2>1000&&emp_num2<1008||emp_num2==0) break;
                }
                
                if (emp_num2 == 0) 
                { 
                        EXEC SQL COMMIT; 
                        printf("End of this transaction\n"); 
                        break; 
                }
				else
                {
					printf("Emp Number : %d\n",emp_num2);
                }/*-------------- Beginning the PL/SQL block -----------------*/ 

                EXEC SQL EXECUTE
                BEGIN 
                        UPDATE ora00079.responsible 
                        SET emp_number=:emp_num2 
                        WHERE part_number=:my_partid;
                        EXCEPTION
                                WHEN NO_DATA_FOUND THEN 
                                :none:=0;
                END;
                END-EXEC;
				EXEC SQL COMMIT;
                /*-------------- end of PL/SQL block -----------------*/ 
                if (none==0)  
                {
                        printf("Record not found \n");
                        none=1;
                }
                else
                {
                        printf("Part_id\t\t\tEmp_id\n"); 
                        printf("---------------\n"); 
                        printf("%d\t\t\t%d\n",my_partid,emp_num2);
                }
        }
        

        EXEC SQL COMMIT;
        }                               /* end of infinite loop */
        return; 
}

/* ******************************************************************************************
*       Display the number of purchase orders done by a given agent (emp_num) 
*       and the total value of these purchase orders.
*  ******************************************************************************************
*/

void quant_()
{
    int my_emp_num,get_total,get_po_number,sum;
    for (;;)                /* infinite loop until user enter a 0 */
    {
		sum=0;
		printf("Number of the pa_agent (1001~1006,0 to quit )? ");
		scanf("%d",&my_emp_num);         
		printf("Part Number : %d\n",my_emp_num);
		if (my_emp_num == 0) 
		{ 
			EXEC SQL COMMIT; 
			printf("End of this transaction\n"); 
			break; 
		} 

    /*-------------- Beginning the PL/SQL block -----------------*/ 

    EXEC SQL DECLARE c1 CURSOR FOR 

        /* SELECT sum(total) FROM purchase_order,pa_task WHERE emp_num = 1001 AND pa_task.po_number=purchase_order.po_number; */
            // SELECT pa_task.po_number,total 
            // FROM ora00079.purchase_order,ora00079.pa_task 
            // WHERE emp_num = :my_emp_num 
            // AND pa_task.po_number=purchase_order.po_number;
			SELECT po_number,total 
            FROM ora00079.purchase_pds 
            WHERE emp_num = :my_emp_num;
           
	EXEC SQL OPEN C1;
	EXEC SQL WHENEVER NOT FOUND do break;
	printf("PO_NUM\t\t\tTOTAL\n"); 
    printf("---------------\n"); 
    /*-------------- end of PL/SQL block -----------------*/ 

	for (;;)
	{
			EXEC SQL fetch c1 into :get_po_number, :get_total;
			 printf("%d\t\t\t%d\n",get_po_number,get_total);
			 sum=sum+ get_total;
	}
	printf("sum of total : %d\n",sum); 
	printf("End of this transaction\n");
    
	exec sql CLOSE c1;
    EXEC SQL COMMIT;
    }                               /* end of infinite loop */
    return; 
}
/* ******************************************************************************************
*       Display for each agent (emp_num, emp_name) the list of all parts(part_id, part_name) 
*       under his responsability
*  ******************************************************************************************
*/
void respon_(){
        int get_emp_number,get_part_id;
        char get_pa_name[16],get_part_name[16];
        {
        /*-------------- Beginning the PL/SQL block -----------------*/ 

    EXEC SQL DECLARE c2 CURSOR FOR 
    SELECT emp_num,pa_name,part_id,part_name
            FROM ora00079.pa_agent,ora00079.part,ora00079.responsible
            WHERE emp_num=emp_number AND part_number=part_id;      
	EXEC SQL OPEN C2;
	EXEC SQL WHENEVER NOT FOUND do break;
	printf("EMP_NUMBER\tPA_NAME\tPART_ID\tPART_NAME\n"); 
    printf("---------------\n"); 
        /*-------------- end of PL/SQL block -----------------*/ 

	for (;;)
	{
			EXEC SQL fetch c2 into :get_emp_number, :get_pa_name, :get_part_id, :get_part_name;
			 printf("%d\t%s\t%d\t%s\n",get_emp_number,get_pa_name,get_part_id,get_part_name);
	}
        exec sql CLOSE c2;
    EXEC SQL COMMIT;
    }                               /* end of infinite loop */
    return; 
}



/* ************************************************************
*       Function print the menu and choose the transaction
*  ************************************************************
*/

int print_menu()
{
   int choice;                          /* id of menu */
        printf("\n\t Choose a transaction by entering a number \n");
        printf("\t *****************************************\n");
        printf("\t (1) modresp\n");
        printf("\t (2) quant\n");
        printf("\t (3) respon\n");
        printf("\t (5) DISPLAY MENU\n");
        printf("\t (6) QUIT\n");
        printf("Enter your choice ? "); 
        scanf("%d",&choice);            /* read the choice */
        return choice;
}
