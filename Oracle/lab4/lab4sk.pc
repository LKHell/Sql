/*
*       Author:         Paul Girard Ph.D., UQAC
*       Date:           March 2016 
*       Objective:      Program using Pro*C/C++ and gcc to show how to use 
*                       different type of PL/SQL blocks & SQL in a C PGM
*
*       Step 1: Precompilation with Pro*C/C++
* proc INAME=lab4base.pc CODE=ANSI_C SQLCHECK=semantics MODE=oracle USERID=user/password CHAR_MAP=charz
*
*       Step 2: Compilation with gcc    
* gcc lab4base.c -o lab4base -include /$ORACLE_HOME/precomp/public/sqlca.h -lclntsh -B$ORACLE_HOME/lib/ -B$ORACLE_HOME/lib
*/

#include <stdio.h>
#include <stdlib.h>
 
void sql_error();
void do_connect();

void part_out();
void pord_in();
void list_po();

int print_menu();

int main()
{ 
        EXEC SQL WHENEVER SQLERROR do sql_error("Error at connect"); 
        
        do_connect();           /* connection to Oracle instance */

/*      Display the program menu
*       and execution of the transaction 
*/
        
        while (1)       /* infinite loop */
        {
         switch (print_menu())
         {
          case 1: part_out();
                  break;
          case 2: pord_in();
                  break;
          case 3: list_po();
                  break;
         
          case 5: print_menu();
                  break;
          case 6: puts("\nAu revoir Sayonara Bye bye, Ni Hao"); 
                exit(0);
          default: puts("\n =====> Enter a digit from the menu please ?");
                   break;
         }
        }
        
        EXEC SQL COMMIT WORK RELEASE;           /* lib�re les verroux et d�connecte */
                                        
        exit(0); 
}                       /* end of main() program */

/* ******************************************************************************************
*       Function to display the original error Oracle message 
*  ******************************************************************************************
*/

void sql_error(char *msg)
{
        char ora_msg[512];                      /* buffer for Oracle error message */
        int buf_len, msg_len;
        
        EXEC SQL WHENEVER SQLERROR continue;    /* Prevent an infinite loop */
        
        printf("\n%s\n",msg);                   /* print the local program message */
        buf_len=sizeof(ora_msg);
        
        sqlglm(ora_msg,&buf_len, &msg_len);     /* read the Oracle error message */
        printf("\n%.*s\n",msg_len, ora_msg);    /* print this message */
        
        EXEC SQL ROLLBACK RELEASE;              /* free locks */
        exit(1);
}               /*      fin de sql_error */

/* ******************************************************************************************
*       Function to do a connection to an Oracle user schema
*  ******************************************************************************************
*/

void do_connect()
{
   char *uid="userid/password";

        EXEC SQL CONNECT :uid; 
        printf("Connected to Oracle schema\n");
}

/* ******************************************************************************************
*       Display the detail of a given purchase order (po_number): 
        po_number, date, purchasing agent_name, supplier number, name, address, contact,list of all ordered products 
        ( product_id, prod_name, prod_ unit,unit_price , qty ordered, qty_received), 
        total, status of the purchase order.
*  ******************************************************************************************
*/

void list_po()
{
char    description[16];     /* C needs 1 more octet than Oracle for binary 0 
                                at the end of a C character type */
int     my_partid, none=1;
        for (;;)                /* infinite loop until user enter a 0 */
        {
                printf("Number of the part (0 to quit )? ");
                scanf("%d",&my_partid);         

                printf("Part Number : %d\n",my_partid);
                if (my_partid == 0) 
                { 
                        EXEC SQL COMMIT; 
                        printf("End of this transaction\n"); 
                        break; 
                } 

/*-------------- Beginning the PL/SQL block -----------------*/ 

        EXEC SQL EXECUTE
        BEGIN 
                SELECT part_name INTO :description      /* note: description needs 1 octet more */
                FROM part WHERE part_id = :my_partid;
                EXCEPTION
                        WHEN NO_DATA_FOUND THEN 
                        :none:=0;
        END;
        END-EXEC;

/*-------------- end of PL/SQL block -----------------*/ 

        if (none==0)  
           {
                printf("Record not found \n");
                none=1;
           }
        else
            {
                printf("Name of the part\n"); 
                printf("---------------\n"); 
                printf("%s\n",description); 
            }
        EXEC SQL COMMIT;
        }                               /* end of infinite loop */
        return; 
}

/* ******************************************************************************************
*      A given part (part_id) is updated (qty_stock) when some qty are taken out
*  ******************************************************************************************
*/

void part_out()
{
        return;
}

/* ******************************************************************************************
*       The corresponding part (part_id, stock_qty, order_qty ) of a product 
*       (product_id, unit,qty_received) delivered by the supplier (supplier_id)
*       following a purchase order (purchase_order_number) is updated) and the
*       detail of the purchase order (qty_rec) is also updated for each product received
*  ******************************************************************************************
*/
void pord_in()
{
        return;
}

/* ************************************************************
*       Function print the menu and choose the transaction
*  ************************************************************
*/

int print_menu()
{
   int choice;                          /* id of menu */
        printf("\n\t Choose a transaction by entering a number \n");
        printf("\t *****************************************\n");
        printf("\t (1) Part out\n");
        printf("\t (2) Pord in\n");
        printf("\t (3) List po\n");
 
        printf("\t (5) DISPLAY MENU\n");
        printf("\t (6) QUIT\n");
        printf("Enter your choice ? "); 
        scanf("%d",&choice);            /* read the choice */
        return choice;
}
